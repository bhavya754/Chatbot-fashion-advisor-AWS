{"version":3,"sources":["hello.js","App.js","serviceWorker.js","index.js"],"names":["require","messages","lastUserMessage","botMessage","imageList","botName","config","apiKey","invokeUrl","region","apigClient","default","newClient","params","document","onkeypress","e","x","window","event","key","keyCode","which","getElementById","value","push","body","question","invokeApi","headers","queryParams","then","result","console","log","String","JSON","parse","data","answer","myNode","firstChild","removeChild","i","length","elem","createElement","src","appendChild","innerHTML","catch","error","chatbotResponse","App","fileChangedHandler","_this","setState","selectedFile","target","files","uploadHandler","state","name","uploadFile","react_default","a","id","class","type","placeholder","onfocus","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac3b31a6.chunk.js","sourcesContent":["const REGION = \"us-west-2\";\nvar AWS = require('aws-sdk');\n//fs = require('fs');\n\nvar messages = [],\nlastUserMessage = \"\",\nbotMessage = \"how can I help you \",\nimageList = null,\nbotName = 'Chatbot';\nvar config = {\n          apiKey : 'Aw6Pqn4Ef51vqKQg1nxgn6kdKU5ijBNuBxqPLL91',\n          invokeUrl : 'https://pqj9shseg5.execute-api.us-west-2.amazonaws.com/test',\n          region : REGION\n};\n\nvar apigClientFactory = require('aws-api-gateway-client').default;\nvar apigClient = apigClientFactory.newClient(config);\nvar params = {};\n\n\nfunction chatbotResponse() {\n   if (document.getElementById(\"chatbox\").value !== \"\") {\n      lastUserMessage = document.getElementById(\"chatbox\").value;\n      messages.push(lastUserMessage);\n      document.getElementById(\"chatbox\").value = \"\";\n      var body = {\n        \"question\" : lastUserMessage,\n      };\n      var additionalParams = {\n        headers : {},\n        queryParams: {}\n      };\n      apigClient.invokeApi(params, '/search', 'GET', additionalParams, body).then(function(result) {\n        console.log(\"Sucessfully got chatbot response\");\n        botMessage = String(JSON.parse(result.data.body).answer);\n        imageList = JSON.parse(result.data.body).imageList;\n        console.log(result)\n        console.log(imageList)\n        var myNode = document.getElementById(\"myImg\");\n        while (myNode.firstChild) {\n            myNode.removeChild(myNode.firstChild);\n        }\n        for (var i = imageList.length - 1; i >= 0; i--) {\n          var elem = document.createElement(\"img\");\n          elem.src = 'https://s3-us-west-2.amazonaws.com/hw3photos/'+imageList[i];\n          document.getElementById(\"myImg\").appendChild(elem);\n           //document.getElementById('myImg').append(\"<img src=\\\"https://s3-us-west-2.amazonaws.com/hw3photos/test2.jpg\\\"/>\");\n        }\n        // TODO: https://s3-us-west-2.amazonaws.com/hw3photos/test4.jpg\n        console.log(botMessage, imageList);\n        messages.push(\"<b>\" + botName + \":</b> \" + botMessage);\n        for (var i = 1; i < 8; i++) {\n          if (messages[messages.length - i])\n            document.getElementById(\"chatlog\" + i).innerHTML = messages[messages.length - i];\n        }\n      }).catch(function(result) {\n        console.error(result)\n        console.error(\"Chatbot response failure\")\n      });\n    }\n}\n\n//runs the keypress() function when a key is pressed\ndocument.onkeypress = keyPress;\n//if the key pressed is 'enter' runs the function newEntry()\nfunction keyPress(e) {\n  var x = e || window.event;\n  var key = (x.keyCode || x.which);\n  if (key === 13 || key === 3) {\n    //runs this function when enter is pressed\n    chatbotResponse();\n  }\n  if (key === 38) {\n    console.log('hi')\n  }\n}\n\n//clears the placeholder text ion the chatbox\n//this function is set to run when the users brings focus to the chatbox, by clicking on it\nfunction placeHolder() {\n  document.getElementById(\"chatbox\").placeholder = \"\";\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport './hello.js';\nimport {uploadFile} from './hello.js';\n\nclass App extends Component {\n  fileChangedHandler = event => {\n      this.setState({\n        selectedFile: event.target.files[0]\n      });\n  }\n\n  uploadHandler = () => {\n      console.log(this.state.selectedFile, this.state.selectedFile.name);\n      uploadFile(this.state.selectedFile);\n  }\n  render() {\n    return (\n      <body>\n      <div>\n      <div id='bodybox'>\n    <div id='chatborder'>\n      <p id=\"chatlog7\" class=\"chatlog\">&nbsp;</p>\n      <p id=\"chatlog6\" class=\"chatlog\">&nbsp;</p>\n      <p id=\"chatlog5\" class=\"chatlog\">&nbsp;</p>\n      <p id=\"chatlog4\" class=\"chatlog\">&nbsp;</p>\n      <p id=\"chatlog3\" class=\"chatlog\">&nbsp;</p>\n      <p id=\"chatlog2\" class=\"chatlog\">&nbsp;</p>\n      <p id=\"chatlog1\" class=\"chatlog\">&nbsp;</p>\n      <input type=\"text\" name=\"chat\" id=\"chatbox\" placeholder=\"Hi there! Type here to talk to me.\" onfocus=\"placeHolder()\"\n      />\n    </div>\n  </div>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n<div id=\"myImg\"></div>\n</div>\n</body>\n    );\n  }\n}\n\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}